#ifndef CCAMERA_H
#define CCAMERA_H

#include "CCam.h"
#include "CEntity.h"
#include "CPlaceable.h"
#include "Types.h"

#pragma pack( push, 8 )
struct CCamera_obj2 {
	int field_0;
	int field_4;
	int field_8;
	int field_C;
};

class CCamera /* B6F028 */ : public CPlaceable {
public:
	char		   m_bAboveGroundTrainNodesLoaded;
	char		   m_bBelowGroundTrainNodesLoaded;
	char		   m_bCamDirectlyBehind;
	char		   m_bCamDirectlyInFront;
	char		   m_bCameraJustRestored;
	char		   m_bCutsceneFinished;
	char		   m_bCullZoneChecksOn;
	char		   m_bFirstPersonBeingUsed;
	char		   m_bJustJumpedOutOf1stPersonBecauseOfTarget;
	char		   m_bIdleOn;
	char		   m_bInATunnelAndABigVehicle;
	char		   m_bInitialNodeFound;
	char		   m_bInitialNoNodeStaticsSet;
	char		   m_bIgnoreFadingStuffForMusic;
	char		   m_bPlayerIsInGarage;
	char		   m_bPlayerWasOnBike;
	char		   m_bJustCameOutOfGarage;
	char		   m_bJustInitalised;
	char		   m_bJust_Switched;
	char		   m_bLookingAtPlayer;
	char		   m_bLookingAtVector;
	char		   m_bMoveCamToAvoidGeom;
	char		   m_bObbeCinematicPedCamOn;
	char		   m_bObbeCinematicCarCamOn;
	char		   m_bRestoreByJumpCut;
	char		   m_bUseNearClipScript;
	char		   m_bStartInterScript;
	char		   m_bStartingSpline;
	char		   m_bTargetJustBeenOnTrain;
	char		   m_bTargetJustCameOffTrain;
	char		   m_bUseSpecialFovTrain;
	char		   m_bUseTransitionBeta;
	char		   m_bUseScriptZoomValuePed;
	char		   m_bUseScriptZoomValueCar;
	char		   m_bWaitForInterpolToFinish;
	char		   m_bItsOkToLookJustAtThePlayer;
	char		   m_bWantsToSwitchWidescreenOff;
	char		   m_WideScreenOn;
	char		   m_1rstPersonRunCloseToAWall;
	char		   m_bHeadBob;
	char		   m_bVehicleSuspenHigh;
	char		   m_bEnable1rstPersonCamCntrlsScript;
	char		   m_bAllow1rstPersonWeaponsCamera;
	char		   m_bCooperativeCamMode;
	char		   m_bAllowShootingWith2PlayersInCar;
	char		   m_bDisableFirstPersonInCar;
	char		   m_bUseMouse3rdPerson;
	char		   m_ModeForTwoPlayersSeparateCars;
	__int16		   m_ModeForTwoPlayersSameCarShootingAllowed;
	__int16		   m_ModeForTwoPlayersSameCarShootingNotAllowed;
	__int16		   m_ModeForTwoPlayersNotBothInCar;
	char		   m_bGarageFixedCamPositionSet;
	char		   m_vecDoingSpecialInterPolation;
	char		   m_bScriptParametersSetForInterPol;
	char		   m_bFading;
	char		   m_bMusicFading;
	char		   m_bMusicFadedOut;
	char		   m_bFailedCullZoneTestPreviously;
	char		   m_FadeTargetIsSplashScreen;
	char		   WorldViewerBeingUsed;
	char		   m_uiTransitionJUSTStarted;
	char		   m_uiTransitionState;
	BYTE		   ActiveCam;
	int			   m_uiCamShakeStart;
	int			   m_uiFirstPersonCamLastInputTime;
	int			   m_uiLongestTimeInMill;
	int			   m_uiNumberOfTrainCamNodes;
	int			   m_uiTimeLastChange;
	int			   m_uiTimeWeLeftIdle_StillNoInput;
	int			   m_uiTimeWeEnteredIdle;
	int			   m_uiTimeTransitionStart;
	int			   m_uiTransitionDuration;
	int			   m_uiTransitionDurationTargetCoors;
	int			   m_BlurBlue;
	int			   m_BlurGreen;
	int			   m_BlurRed;
	int			   m_BlurType;
	int			   m_iWorkOutSpeedThisNumFrames;
	int			   m_iNumFramesSoFar;
	int			   m_iCurrentTrainCamNode;
	int			   m_motionBlur;
	int			   m_imotionBlurAddAlpha;
	int			   m_iCheckCullZoneThisNumFrames;
	int			   m_iZoneCullFrameNumWereAt;
	int			   WhoIsInControlOfTheCamera;
	int			   m_nCarZoom;
	float		   m_fCarZoomBase;
	float		   m_fCarZoomTotal;
	float		   m_fCarZoomSmoothed;
	float		   m_fCarZoomValueScript;
	int			   m_nPedZoom;
	float		   m_fPedZoomBase;
	int			   m_fPedZoomTotal;
	float		   m_fPedZoomSmoothed;
	float		   m_fPedZoomValueScript;
	float		   CamFrontXNorm;
	float		   CamFrontYNorm;
	float		   DistanceToWater;
	float		   HeightOfNearestWater;
	float		   FOVDuringInter;
	float		   LODDistMultiplier;
	float		   GenerationDistMultiplier;
	float		   m_fAlphaSpeedAtStartInter;
	float		   m_fAlphaWhenInterPol;
	float		   m_fAlphaDuringInterPol;
	float		   m_fBetaDuringInterPol;
	float		   m_fBetaSpeedAtStartInter;
	float		   m_fBetaWhenInterPol;
	float		   m_fFOVWhenInterPol;
	float		   m_fFOVSpeedAtStartInter;
	float		   m_fStartingBetaForInterPol;
	float		   m_fStartingAlphaForInterPol;
	float		   m_PedOrientForBehindOrInFront;
	float		   m_CameraAverageSpeed;
	float		   m_CameraSpeedSoFar;
	float		   m_fCamShakeForce;
	float		   m_fFovForTrain;
	float		   m_fFOV_Wide_Screen;
	float		   m_fNearClipScript;
	float		   m_fOldBetaDiff;
	float		   m_fPositionAlongSpline;
	float		   m_ScreenReductionPercentage;
	float		   m_ScreenReductionSpeed;
	float		   m_AlphaForPlayerAnim1rstPerson;
	float		   Orientation;
	float		   PlayerExhaustion;
	float		   SoundDistUp;
	float		   SoundDistUpAsRead;
	float		   SoundDistUpAsReadOld;
	float		   m_fAvoidTheGeometryProbsTimer;
	__int16		   m_nAvoidTheGeometryProbsDirn;
	int			   m_fWideScreenReductionAmount;
	int			   m_fStartingFOVForInterPol;
	CCam		   Cams[3];
	class CGarage *pToGarageWeAreIn;
	class CGarage *pToGarageWeAreInForHackAvoidFirstPerson;
	CQueuedMode	   m_PlayerMode;
	CQueuedMode	   PlayerWeaponMode;
	RwV3D		   m_PreviousCameraPosition;
	RwV3D		   m_RealPreviousCameraPosition;
	RwV3D		   m_cvecAimingTargetCoors;
	RwV3D		   m_vecFixedModeVector;
	RwV3D		   m_vecFixedModeSource;
	RwV3D		   m_vecFixedModeUpOffSet;
	RwV3D		   m_vecCutSceneOffset;
	RwV3D		   m_cvecStartingSourceForInterPol;
	RwV3D		   m_cvecStartingTargetForInterPol;
	RwV3D		   m_cvecStartingUpForInterPol;
	RwV3D		   m_cvecSourceSpeedAtStartInter;
	RwV3D		   m_cvecTargetSpeedAtStartInter;
	RwV3D		   m_cvecUpSpeedAtStartInter;
	RwV3D		   m_vecSourceWhenInterPol;
	RwV3D		   m_vecTargetWhenInterPol;
	RwV3D		   m_vecUpWhenInterPol;
	RwV3D		   m_vecClearGeometryVec;
	RwV3D		   m_vecGameCamPos;
	RwV3D		   SourceDuringInter;
	RwV3D		   TargetDuringInter;
	RwV3D		   UpDuringInter;
	RwV3D		   m_vecAttachedCamOffset;
	RwV3D		   m_vecAttachedCamLookAt;
	float		   m_fAttachedCamAngle;
	RwCamera *	   m_pRwCamera;
	CEntity *	   pTargetEntity;
	CEntity *	   pAttachedEntity;
	int			   m_arrPathArray[4];
	char		   m_bMirrorActive;
	char		   m_bResetOldMatrix;
	CMatrix		   m_cameraMatrix;
	CMatrix		   m_cameraMatrixOld;
	CMatrix		   m_viewMatrix;
	CMatrix		   m_matInverse;
	CMatrix		   m_matMirrorInverse;
	CMatrix		   m_matMirror;
	RwV3D		   m_vecFrustumNormals[4];
	RwV3D		   m_vecFrustumWorldNormals[4];
	RwV3D		   m_vecFrustumWorldNormals_Mirror[4];
	float		   m_fFrustumPlaneOffsets[4];
	float		   m_fFrustumPlaneOffsets_Mirror[4];
	RwV3D		   m_vecRightFrustumNormal;
	RwV3D		   m_vecBottomFrustumNormal;
	RwV3D		   m_vecTopFrustumNormal;
	RwV3D		   m_vecOldSourceForInter;
	RwV3D		   m_vecOldFrontForInter;
	RwV3D		   m_vecOldUpForInter;
	float		   m_vecOldFOVForInter;
	float		   m_fFLOATingFade;
	float		   m_fFLOATingFadeMusic;
	float		   m_fTimeToFadeOut;
	float		   m_fTimeToFadeMusic;
	float		   m_fTimeToWaitToFadeMusic;
	float		   m_fFractionInterToStopMoving;
	float		   m_fFractionInterToStopCatchUp;
	float		   m_fFractionInterToStopMovingTarget;
	float		   m_fFractionInterToStopCatchUpTarget;
	float		   m_fGaitSwayBuffer;
	float		   m_fScriptPercentageInterToStopMoving;
	float		   m_fScriptPercentageInterToCatchUp;
	float		   m_fScriptTimeForInterPolation;
	__int16		   m_iFadingDirection;
	int			   m_iModeObbeCamIsInForCar;
	__int16		   m_iModeToGoTo;
	__int16		   m_iMusicFadingDirection;
	__int16		   m_iTypeOfSwitch;
	int			   m_uiFadeTimeStarted;
	int			   m_uiFadeTimeStartedMusic;
	int			   field_C48;
	int			   field_C4C;
	int			   field_C50;
	float		   field_C54;
	float		   field_C58;
	float		   fTransverseStartTime;
	float		   fTransverseEndTime;
	RwV3D		   fTransverseEndPoint;
	RwV3D		   fTransverseStartPoint;
	BYTE		   bTransverseMode;
	char		   field_C7D;
	char		   field_C7E;
	char		   field_C7F;
	RwV3D		   field_C80;
	char		   field_C8C;
	char		   field_C8D;
	char		   field_C8E;
	char		   field_C8F;
	int			   JiggleIntensity;
	float		   __startJiggleTime;
	float		   __endJiggleTime;
	int			   field_C9C;
	int			   JiggleType;
	float		   fZoomStartTime;
	float		   fZoomEndTime;
	float		   fZoomTo;
	float		   fZoomFrom;
	BYTE		   bZoomSmooth;
	char		   _isZooming;
	char		   field_CB6;
	char		   field_CB7;
	float		   fZoom;
	int			   field_CBC;
	int			   field_CC0;
	RwV3D		   field_CC4;
	RwV3D		   field_CD0;
	char		   field_CDC;
	char		   field_CDD;
	char		   field_CDE;
	char		   field_CDF;
	RwV3D		   field_CE0;
	char		   field_CEC;
	char		   field_CED;
	char		   field_CEE;
	char		   field_CEF;
	char		   field_CF0;
	char		   field_CF1;
	char		   field_CF2;
	char		   field_CF3;
	CCamera_obj2   field_CF4[5];
	int			   field_D44;
	int			   field_D48;
	int			   field_D4C;
	int			   field_D50;

	bool			 isSphereVisible( RwV3D pos, float range = 1.0f );
	static RwV3D	 getPosition(); /* B6F338 */
	static RwV3D	 getRotation();
	static CVector2D getTarget();
	static void		 setTarget( CVector2D );
	int				 fade( float diraction, uint16_t inOut );
	void			 Find3rdPersonCamTargetVector( float dist, float posX, float posY, float posZ, const RwV3D &unkVec,
												   RwV3D &output );
	void			 Find3rdPersonCamTargetVector( float dist, const RwV3D &pos, const RwV3D &unkVec, RwV3D &output );
	static RwV3D	 Find3rdPersonCamTargetVector( float dist, const RwV3D &pos );
	void			 setShake( float stretch = 2.0f );

	static CCamera *TheCamera();
};
#pragma pack( pop )


#define CLASS_CCamera *(CCamera *)0xB6F028
#define LOCAL_CAMERA ( &CLASS_CCamera )
#define CLASS_RwCamera 0xB6F97C

#endif // CCAMERA_H
